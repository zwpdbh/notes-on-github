* How to xiao xin allocate memory
#+BEGIN_SRC c
  csv_parser csv;
  csv.init(csv_file);
  csv.set_enclosed_char('"', ENCLOSURE_OPTIONAL);
  csv.set_field_term_char(',');
  csv.set_line_term_char('\n');
  csv.get_row();


  while (csv.has_more_rows()) {
    IMG *img = new IMG();
    snprintf(img->name, 50, format, csv.get_row()[1].c_str());
    img->readImg();
    imgs.push_back(img);
   }
#+END_SRC
- imgs is the type of vector of pointer to ~IMG~
- real allocation happens in ~img->readImg()~ in ~class IMG~.
#+BEGIN_SRC c
  void readImg() {
    readImgInStream();
     
  }

  void readImgInStream() {
    ifstream in;
    char tname[50];
    strcpy(tname, name);
    strcat(tname, ".bin");
    in.open(tname);

    in.read((char *)&rows, sizeof(int));
    in.read((char *)&cols, sizeof(int));
    printf("%s %d %d\n", name, rows, cols);
    int size = rows * cols;
    data = new float[size];
    in.read((char *)data, size * sizeof(float));
    in.close();

    // if algorithm choice == 4 which is rbc
    if (ALG == 4 && cols % 4 != 0) {
      int nrows = rows / 4 * 4;
      int ncols = cols / 4 * 4 + 4;
      size = nrows * ncols;
      float *ndata = new float[size];
      memset(ndata, 0, size * sizeof(float));
      int step1 = 0;
      int step2 = 0;
      for (int i = 0; i < nrows; ++i) {
        memcpy(ndata + step1, data + step2, cols * sizeof(float));
        step1 += ncols;
        step2 += cols;
      }
      delete[] data;
      data = ndata;
      rows = nrows;
      cols = ncols;
    }
  }
#+END_SRC
- ~istream& read (char* s, streamsize n)~
  - s, pointer to an array where the extracted characterre stored.
  - n, number of characters to extract. Iti s a signed integral type.
  - One part of the output is:
    #+BEGIN_SRC sh
      features/_DSC0539.jpg 10164 128
      features/_DSC0543.jpg 5091 128
    #+END_SRC
  - ~in.read((char*) data, size * sizeof(float));~ which allocate enough memory space for storing feature data.
